#!/usr/bin/env python2
import subprocess
import sys
import unittest


def git(*args):
    p = subprocess.Popen(['git'] + list(args), stdout=subprocess.PIPE)
    return p.stdout.read().decode('utf-8').strip()


rev_fields = [
    ('%H', 'sha'),
    ('%P', 'parents'),
    ('%D', 'ref'),
    ('%cN', 'committer.name'),
    ('%cE', 'committer.email'),
    ('%cI', 'committer.date'),
    ('%aN', 'author.name'),
    ('%aE', 'author.email'),
    ('%aI', 'author.date'),
]

rev_format = '%x00'.join([p for p, _ in rev_fields])


def dot_set(d, path, v):
    """Sets a key in a nested dict, where path is a string like 'foo.bar'"""
    key = path.split('.')
    for k in key[:-1]:
        d = d.setdefault(k, {})
    d[key[-1]] = v


def parse_commit(revline):
    commit = {}
    for field, value in zip([f for _, f in rev_fields], revline.split('\0')):
        dot_set(commit, field, value)

    commit['parents'] = [{ 'sha': s } for s in commit['parents'].split(' ')]
    return commit


def update(old_sha, new_sha, ref):
    revs = git('rev-list', '--pretty=%s' % rev_format, '--reverse',
               '%s..%s' % (old_sha, new_sha))

    for l in revs.splitlines():
        # skip header rows
        if l.startswith('commit '):
            continue

        print parse_commit(l)


def main():
    if sys.argv[1:] == ['--test']:
        sys.argv = [sys.argv[0]] + ['--verbose']
        unittest.main()
        return

    for l in sys.stdin.xreadlines():
        old_sha, new_sha, ref = l.split()
        update(old_sha, new_sha, ref)


# Tests -- to run, use ./post-receive --test

class ParseCommitTest(unittest.TestCase):
    def test_works(self):
        fields = [
            'sha', 'parentsha', 'ref', 'cname', 'cemail', 'cdate',
            'aname', 'aemail', 'adate',
        ]
        self.assertEquals(parse_commit('\0'.join(fields)), {
            'sha': 'sha',
            'parents': [{'sha': 'parentsha'}],
            'ref': 'ref',
            'committer': {'name': 'cname', 'email': 'cemail', 'date': 'cdate',},
            'author': {'name': 'aname', 'email': 'aemail', 'date': 'adate',},
        })

    def test_multiple_parents(self):
        fields = [
            'sha', 'parentsha1 parentsha2', 'ref', 'cname', 'cemail', 'cdate',
            'aname', 'aemail', 'adate',
        ]
        c = parse_commit('\0'.join(fields))
        self.assertEquals([{'sha': 'parentsha1'}, {'sha': 'parentsha2'}],
                          c['parents'])


class DotSetTest(unittest.TestCase):
    def test_one_key(self):
        c = {}
        dot_set(c, 'foo', 1)
        self.assertEquals(c, {'foo': 1})

    def test_nested(self):
        c = {}
        dot_set(c, 'foo.bar', 1)
        self.assertEquals(c, {'foo': {'bar': 1}})

    def test_merge(self):
        c = {'foo': {'bar': 1}}
        dot_set(c, 'foo.baz', 3)
        self.assertEquals(c, {'foo': {'bar': 1, 'baz': 3}})


if __name__ == '__main__':
    main()
