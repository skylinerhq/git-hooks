#!/usr/bin/env python2.7
import json
import logging
import subprocess
import sys
import unittest
import time
import traceback
from urllib2 import Request, URLError, HTTPError, urlopen
from urlparse import urljoin
import urlparse


logging.basicConfig(level=logging.INFO, format='[SKYLINER] %(msg)s')
logger = logging.getLogger(__name__)


def git(*args):
    p = subprocess.Popen(['git'] + list(args), stdout=subprocess.PIPE)
    return p.stdout.read().decode('utf-8').strip()


def read_config():
    raw = git('config', '--list', '--null')
    pairs = [p.strip().split('\n') for p in raw.split('\0') if len(p.strip())]
    return { k.lower(): v for k, v in [p + ['']*(2 - len(p)) for p in pairs] }


class Config(dict):
    def __init__(self):
        self.update(read_config())

    def bool(self, k, default=None):
        return self.get(k, default) == 'true'


config = Config()


rev_fields = [
    ('%H', 'sha'),
    ('%P', 'parents'),
    ('%D', 'ref'),
    ('%cN', 'committer.name'),
    ('%cE', 'committer.email'),
    ('%cI', 'committer.date'),
    ('%aN', 'author.name'),
    ('%aE', 'author.email'),
    ('%aI', 'author.date'),
]

rev_format = '%x00'.join([p for p, _ in rev_fields])


def dot_set(d, path, v):
    """Sets a key in a nested dict, where path is a string like 'foo.bar'"""
    key = path.split('.')
    for k in key[:-1]:
        d = d.setdefault(k, {})
    d[key[-1]] = v


def parse_commit(revline):
    commit = {}
    for field, value in zip([f for _, f in rev_fields], revline.split('\0')):
        dot_set(commit, field, value)

    commit['parents'] = [{ 'sha': s } for s in commit['parents'].split(' ')]
    return commit


def update_data(before, after, ref):
    revs = git('rev-list', '--pretty=%s' % rev_format, '--reverse',
               '%s..%s' % (before, after))

    commits = []
    for l in revs.splitlines():
        # skip header rows
        if l.startswith('commit '):
            continue

        commits.append(parse_commit(l))

    return {
        'ref': ref,
        'before': before,
        'after': after,
        'commits': commits
    }


class SkylinerResponseError(IOError):
    pass


class Update(object):
    def __init__(self, before, after, ref):
        self.data = update_data(before, after, ref)

    def send(self):
        server = config.get('skyliner.server', 'https://www.skyliner.io')
        token = config['skyliner.token']
        repo_name = config['skyliner.repo-name']

        url = urljoin(server, '/commits/%s/%s' % (token, repo_name))
        r = Request(url, json.dumps(self.data), {
            'Content-Type': 'application/json',
        })
        response = urlopen(r).read()
        logger.info('Sent commits to %s' % url)
        logger.info('Payload: %s' % self.data)

        try:
            data = json.loads(response)
        except ValueError:
            raise SkylinerResponseError(
                'Received a malformed response: %s' % response
            )
        else:
            if 'ok' not in data:
                raise SkylinerResponseError(
                    'Unexpected response from server: %s' % response
                )

            if not data['ok']:
                raise SkylinerResponseError(
                    'The server reported an error: %s' % response
                )

            logger.debug('Received response: %s' % response)


def update(before, after, ref):
    logger.info('Notifying application of git push...')

    u = Update(before, after, ref)
    for retry in range(5):
        try:
            u.send()
            logger.info('done.')
            return
        except (URLError, HTTPError), e:
            if retry < 4:
                logger.warn('Failed to submit commits to Skyliner. '
                            'Error: %s. Retrying...' % e)
                time.sleep(0.2 * retry)

        except SkylinerResponseError, e:
            break

    logger.warn('Failed to submit commits to Skyliner. %s' %
                traceback.format_exc())


def assert_mock_lib():
    # avoid taking a dependency on mock for the normal operation of
    # the script.
    try: import mock
    except ImportError:
        print 'Install mock to run tests (`pip install mock`)'
        sys.exit(1)

def assert_configured(conf=config):
    ok = True

    if not conf.get('skyliner.token'):
        ok = False
        logger.error(
            'Please have a repository administrator set a valid Skyliner token '
            'for this repository: `git config skyliner.token <token>`\n'
            'Your token can be found on your account settings page.'
        )

    if not conf.get('skyliner.repo-name'):
        ok = False
        logger.error(
            'Please have a repository administrator set a repository name: '
            '`git config skyliner.repo-name <name>'
        )

    return ok

def main():
    if sys.argv[1:] == ['--test']:
        assert_mock_lib()
        sys.argv = [sys.argv[0]] + ['--verbose']
        logger.setLevel(logging.CRITICAL)
        unittest.main()
        return

    if not assert_configured():
        return

    if config.bool('skyliner.verbose'):
        logger.setLevel(logging.DEBUG)

    logger.debug('config: %s' % { k: v for k, v in config.items()
                                  if k.startswith('skyliner.')})

    for l in sys.stdin.xreadlines():
        before, after, ref = l.split()
        update(before, after, ref)


# Tests -- to run, use ./post-receive --test

class AssertConfiguredTest(unittest.TestCase):
    def test_ok(self):
        conf = { 'skyliner.repo-name': 'foo', 'skyliner.token': 'bar' }
        self.assertTrue(assert_configured(conf))

    def test_missing_name(self):
        conf = { 'skyliner.token': 'bar' }
        self.assertFalse(assert_configured(conf))

    def test_missing_token(self):
        conf = { 'skyliner.repo-name': 'foo'}
        self.assertFalse(assert_configured(conf))


class ConfigTest(unittest.TestCase):
    def test_works(self):
        conf = '\0'.join([
            'key1\nvalue1',
            'key2\nvalue2',
            'KEY3\nvalue3',
        ])

        from mock import patch
        with patch('__main__.git', return_value=conf):
            c = Config()
            self.assertEquals(c['key1'], 'value1')

    def test_lowercases(self):
        conf = '\0'.join([
            'key1\nvalue1',
            'key2\nvalue2',
            'KEY3\nvalue3',
        ])

        from mock import patch
        with patch('__main__.git', return_value=conf):
            c = Config()
            self.assertEquals(c['key3'], 'value3')

    def test_empty(self):
        conf = '\0'.join([
            'key1\n',
        ])

        from mock import patch
        with patch('__main__.git', return_value=conf):
            c = Config()
            self.assertEquals(c['key1'], '')

    def test_bool_missing(self):
        conf = '\0'.join([
            'key1\n',
        ])
        from mock import patch
        with patch('__main__.git', return_value=conf):
            c = Config()
            self.assertFalse(c.bool('key1'))

    def test_bool_false(self):
        conf = '\0'.join([
            'key1\nfalse',
        ])
        from mock import patch
        with patch('__main__.git', return_value=conf):
            c = Config()
            self.assertFalse(c.bool('key1'))

    def test_bool_true(self):
        conf = '\0'.join([
            'key1\ntrue',
        ])
        from mock import patch
        with patch('__main__.git', return_value=conf):
            c = Config()
            self.assertTrue(c.bool('key1'))


class UpdateDataTest(unittest.TestCase):
    def test_works(self):
        fields = [
            'sha', 'parentsha', 'ref', 'cname', 'cemail', 'cdate',
            'aname', 'aemail', 'adate',
        ]
        revs = '\n'.join([
            'commit sha',
            '\0'.join(fields),
            'commit sha',
            '\0'.join(fields),
        ])
        commit = {
            'sha': 'sha',
            'parents': [{'sha': 'parentsha'}],
            'ref': 'ref',
            'committer': {'name': 'cname', 'email': 'cemail', 'date': 'cdate',},
            'author': {'name': 'aname', 'email': 'aemail', 'date': 'adate',},
        }
        from mock import patch
        with patch('__main__.git', return_value=revs):
            self.assertEquals({
                'before': 'beforesha',
                'after': 'aftersha',
                'ref': 'refs/heads/master',
                'commits': [commit, commit]
            }, update_data('beforesha', 'aftersha', 'refs/heads/master'))


class ParseCommitTest(unittest.TestCase):
    def test_works(self):
        fields = [
            'sha', 'parentsha', 'ref', 'cname', 'cemail', 'cdate',
            'aname', 'aemail', 'adate',
        ]
        self.assertEquals(parse_commit('\0'.join(fields)), {
            'sha': 'sha',
            'parents': [{'sha': 'parentsha'}],
            'ref': 'ref',
            'committer': {'name': 'cname', 'email': 'cemail', 'date': 'cdate',},
            'author': {'name': 'aname', 'email': 'aemail', 'date': 'adate',},
        })

    def test_multiple_parents(self):
        fields = [
            'sha', 'parentsha1 parentsha2', 'ref', 'cname', 'cemail', 'cdate',
            'aname', 'aemail', 'adate',
        ]
        c = parse_commit('\0'.join(fields))
        self.assertEquals([{'sha': 'parentsha1'}, {'sha': 'parentsha2'}],
                          c['parents'])


class DotSetTest(unittest.TestCase):
    def test_one_key(self):
        c = {}
        dot_set(c, 'foo', 1)
        self.assertEquals(c, {'foo': 1})

    def test_nested(self):
        c = {}
        dot_set(c, 'foo.bar', 1)
        self.assertEquals(c, {'foo': {'bar': 1}})

    def test_merge(self):
        c = {'foo': {'bar': 1}}
        dot_set(c, 'foo.baz', 3)
        self.assertEquals(c, {'foo': {'bar': 1, 'baz': 3}})


if __name__ == '__main__':
    main()
